global !p
def upperfirst(t):
	if len(t) < 2:
		return '' if len(t) < 1 else t.capitalize()
	return t[0].capitalize() + t[1:]
def lowerdash(t):
	return '-'.join([ w.lower() for w in re.findall('[a-z]+|[A-Z]+[a-z]*', t) ])
endglobal

# Normal javascript snippets
#
snippet imp "import package that converts from camelCase or PascalCase to kebab-cased" b
import $1 from "$2`!p snip.rv=lowerdash(t[1])`"
endsnippet

snippet impf "import File from './File'" b
import $1 from "${2:./}${3:$1}"
endsnippet

snippet impn "import { nested } from" b
import { $1 } from "$2"
endsnippet

snippet impa "import all from a package that converts from camelCase or PascalCase to kebab-cased" b
import * as $1 from "$2`!p snip.rv=lowerdash(t[1])`"
endsnippet

snippet icm "import css module" b
import ${2:styles} from "./${1:`!v expand('%:t:r')`}.module.css"
endsnippet

snippet cl "console.log" w
console.log($1)
endsnippet

snippet clv "console.log variable" w
console.log("$1:", $1)
endsnippet

snippet ce "console.error" w
console.error($1)
endsnippet

snippet cev "console.error variable" w
console.error("$1: ", $1)
endsnippet

snippet cw "console.warn" w
console.warn($1)
endsnippet

snippet cwv "console.warn variable" w
console.warn("$1: ", $1)
endsnippet

snippet ct "console.table" w
console.table($1)
endsnippet

snippet dev "process.env.NODE_ENV !== 'production'" w
process.env.NODE_ENV !== "production"
endsnippet

snippet prod "process.env.NODE_ENV === 'production'" w
process.env.NODE_ENV === "production"
endsnippet

# ==========================================
# Test Snippets
#
snippet rtf "React Test File" b
import React from "react"
import { render } from "@testing-library/react"

import { ${1:`!v expand('%:t:r')`} } from "../$1"

describe("$1", () => {
	it("should $2", () => {
		$3
	})
})
endsnippet

snippet rhtf "React Hooks Test File" b
import { renderHook } from "@testing-library/react-hooks"

import $2 from "../${1:`!v expand('%:t:r')`}"

describe("$1", () => {
	it("should $3", () => {
		$4
	})
})
endsnippet

snippet desc "describe a test" b
describe("$1", () => {
	it("should $2", () => {
		$3
	})
})
endsnippet

snippet it "create a test block" b
it("should $1", () => {
	$2
})
endsnippet

snippet ait "create an async test block" b
it('should $1', async () => {
	$2
})
endsnippet

snippet es "expect(container).toMatchSnapshot()" b
expect(${1:container}).toMatchSnapshot()$0
endsnippet

snippet intf "create interface for file" b
export interface ${1:`!v expand('%:t:r')`}$2 {
	$0
}
endsnippet

# ==========================================
# React Snippets
#
snippet rce "react class exported" b
import React, { Component } from "react"

export default class ${1:`!v expand('%:t:r')`} extends Component {
	public render() {
		return ${2:null}$0
	}
}
endsnippet

snippet rcep "react class exported (with prop interface)" b
import React, { Component } from "react"

export interface $1Props {
}

export default class ${1:`!v expand('%:t:r')`} extends Component<$1Props> {
	public render() {
		return ${2:null}$0
	}
}
endsnippet

snippet rceps "react class exported (with prop and state interfaces)" b
import React, { Component } from "react"

export interface $1Props {
}

export interface $1State {
}

export default class ${1:`!v expand('%:t:r')`} extends Component<$1Props, $1State> {
	constructor(props: $1Props) {
		super(props)

		this.state = {}
	}

	public render() {
		return ${2:null}$0
	}
}
endsnippet

snippet rcc "React class component" b
class $1 extends Component {
	public render() {
		return null$0
	}
}
endsnippet

snippet rcon "React class constructor" b
constructor(props: ${1:`!v expand('%:t:r')`}Props) {
	super(props)

	this.state = ${1:{}}$0
}
endsnippet

snippet fce "function component export (with prop interface)" b
import { FunctionComponent, ReactElement } from "react"

interface $1Props {
	$3
}

export const ${1:`!v expand('%:t:r')`}<${$!Props}> = (): ReactElement => {
	return (
		<div>
		${4:null}$0
		</div>
	)
}
endsnippet

snippet sfce "simple function component export (no prop interface)" b
import React, { ReactElement } from "react"

export default function ${1:`!v expand('%:t:r')`}(): ReactElement | null {
	return ${2:null}
}
endsnippet

snippet ffce "forwarded function component export"
import React, { forwardRef } from "react"

export interface ${1:`!v expand('%:t:r')`}Props {
	$3
}

export default forwardRef<HTML${2:Div}Element, $1Props>(function $1(props, ref) {
	return (
		<div ref={ref}>$0
		</div>
	)
})

endsnippet

snippet rcf "react class function" b
$1 = (${2:event}) => {
	$3
}
endsnippet

# ==========================================
# Component Specs and Lifecycle Section
#
snippet gds "get derived state from props" b
public static getDerivedStateFromProps(nextProps: ${1:`!v expand('%:t:r')`}Props, prevState: $1State) {
	return ${2:null}$0
}
endsnippet

snippet gde "get derived state from props" b
public static getDerivedStateFromError(error: Error) {
	return ${1:null}$0
}
endsnippet

snippet cdm "component did mount" b
public componentDidMount() {
	$1
}
endsnippet

snippet scu "should component update" b
public shouldComponentUpdate(nextProps: ${1:`!v expand('%:t:r')`}Props, nextState: $1State) {
	return ${1:true}$0
}
endsnippet

snippet gsbu "get snapshot before update" b
public getSnapshotBeforeUpdate(prevProps: ${1:`!v expand('%:t:r')`}Props, prevState: $1State) {
	return ${2:null}$0
}
endsnippet

snippet cdu "component did update" b
public componentDidUpdate(prevProps: ${1:`!v expand('%:t:r')`}Props, prevState: $1State, ${2:snapshot: any}) {
	$3
}
endsnippet

snippet cdc "component did catch" b
public componentDidCatch(error: Error, info: ErrorInfo) {
	$1
}
endsnippet

snippet cwum "component will unmount" b
public componentWillUnmount() {
	$1
}
endsnippet

snippet me "MouseEvent<HTMLButtonElement>" w
${1:event: }MouseEvent<HTML${2:Button}Element>$0
endsnippet

snippet te "TouchEvent<HTMLButtonElement>" w
${1:event: }TouchEvent<HTML${2:Button}Element>$0
endsnippet

snippet ke "KeyboardEvent<HTMLElement>" w
${1:event: }KeyboardEvent<HTML$2Element>$0
endsnippet

snippet che "ChangeEvent<HTMLInputElement>" w
${1:event: }ChangeEvent<HTML${2:Input}Element>$0
endsnippet

snippet fe "FocusEvent<HTMLInputElement>" w
${1:event: }FocusEvent<HTML${2:Input}Element>$0
endsnippet

snippet foe "FormEvent<HTMLInputElement>" w
${1:event: }FormEvent<HTML${2:Input}Element>$0
endsnippet

snippet meh "MouseEventHandler<HTMLButtonElement>" w
MouseEventHandler<HTML${1:Button}Element>$0
endsnippet

snippet teh "TouchEventHandler<HTMLButtonElement>" w
TouchEventHandler<HTML${1:Button}Element>$0
endsnippet

snippet keh "KeyboardEventHandler<HTMLElement>" w
KeyboardEventHandler<HTML$1Element>$0
endsnippet

snippet cheh "ChangeEventHandler<HTMLInputElement>" w
ChangeEventHandler<HTML${1:Input}Element>$0
endsnippet

snippet feh "FocusEventHandler<HTMLInputElement>" w
FocusEventHandler<HTML${1:Input}Element>$0
endsnippet

snippet foeh "FormEventHandler<HTMLElement>" w
FormEventHandler<HTMLElement>$0
endsnippet

# ==========================================
# Hooks and effects
#

snippet useS "useState()" b
const [$1, set$4`!p snip.rv=upperfirst(t[1])`] = useState$3($2)$0
endsnippet

snippet useE "useEffect()" b
useEffect(() => {
	$0
}, [$1])
endsnippet

snippet useEA "useEffect() async" b
useEffect(() => {
	let cancelled = false

	;(async function ${4:doWork}(): Promise<${5:void}> {
		${1:// async work here}
		if (cancelled) {
			return
		}

		$2
	})()

	return () => {
		cancelled = true
	}
}, [$3])
endsnippet

snippet useC "useContext()" b
${5:const ${1:context} =} useContext$3($2)$0
endsnippet

snippet useRed "useReducer(reducer, initialValue)" b
const [${4:state}, ${5:dispatch}] = useReducer<typeof $2>(${2:reducer}, ${3:null})
endsnippet

snippet useRedUT "use reducer untyped" b
const [${3:state}, ${4:dispatch}] = useReducer($1, ${2:{}})
endsnippet

snippet useCB "useCallback(fn, inputs)" b
const ${1:callback} = useCallback(($2) => ${3:{
	$4
}}, [$5])
endsnippet

snippet useM "useMemo(fn, inputs)" b
const ${1:memoized} = useMemo(() => ${2:{
	$3
}}, [$4])
endsnippet

snippet useR "useRef(defaultValue)" b
const ${1:ref} = useRef$3(${2:null})$0
endsnippet

snippet useI "useImperitiveHandle(ref, createHandle, [inputs])" b
useImperitiveHandle(${1:ref}, ${4:() => ({
	$2
})}, ${5:[$3]})
endsnippet

snippet useL "useLayoutEffect()" b
useLayoutEffect(() => {
	$0
}, [$1])
endsnippet

snippet useDV "useDebugValue(value)" b
useDebugValue(${1:null})
endsnippet

# ==========================================
# "Inline" versions of hooks
#

priority -1
snippet useC "useContext()" w
useContext$2($1)
endsnippet

snippet useCB "useCallback(fn, inputs)" w
useCallback(($1) => ${2:{
	$3
}}, [$4])
endsnippet

snippet useM "useMemo(fn, inputs)" w
useMemo(() => ${1:{
	$2
}}, [$3])
endsnippet

snippet useR "useRef(defaultValue)" w
useRef$2(${1:null})$0
endsnippet

priority 0
